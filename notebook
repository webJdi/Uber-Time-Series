{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10647583,"sourceType":"datasetVersion","datasetId":6592703},{"sourceId":10652877,"sourceType":"datasetVersion","datasetId":6596630},{"sourceId":10701140,"sourceType":"datasetVersion","datasetId":6631628}],"dockerImageVersionId":30839,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Uber Trip Time Series Analysis","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19"}},{"cell_type":"markdown","source":"### Authors:\n\nSuman Senapati\n\nKoelgeet Kaur","metadata":{}},{"cell_type":"markdown","source":"### Based on the dataset (source: https://github.com/fivethirtyeight/uber-tlc-foil-response) we are working on, we may look at the following goals/objectives:\n\n## **1. Ride Demand Prediction**\n### **Goal:** Predict the number of Uber pickups at a given time and location.\n- **Input Features:**  \n  - Date & Time (hour, day, month, weekday/weekend)\n  - Location (Latitude & Longitude or Zone ID)\n- **Output:** Expected number of Uber pickups.\n- **Models:**  \n  - **Time Series Models:** ARIMA, SARIMA, Facebook Prophet  \n  - **Machine Learning Models:** XGBoost, Random Forest, LSTM (Deep Learning)\n\n**Use Case:** Helps Uber optimize driver deployment and dynamic pricing.\n\n\n## **2. Trip Hotspot Prediction**\n### **Goal:** Predict the most popular pickup locations at different times of the day.\n- **Input Features:**  \n  - Time of Day, Day of Week\n  - Past demand in the same location\n- **Output:** Top **N** locations where demand will be high.\n- **Models:**  \n  - **Clustering:** K-Means, DBSCAN (to identify ride hotspots)\n  - **Regression Models:** Random Forest, Gradient Boosting\n\n**Use Case:** Uber can allocate more drivers in high-demand areas.\n\n\n## **3. Peak Hour Traffic Analysis**\n### **Goal:** Predict when ride demand will surge based on past trends.\n- **Input Features:**  \n  - Hourly Uber pickup trends\n  - Day of the week, Holiday indicators\n  - External data (weather, events)\n- **Output:** Predict peak ride demand hours.\n- **Models:**  \n  - Time Series Forecasting (LSTM, ARIMA, Prophet)\n  - Classification (Random Forest, XGBoost)\n\n**Use Case:** Helps Uber optimize surge pricing and driver incentives.\n\n---\n","metadata":{}},{"cell_type":"markdown","source":"## 0. Library Installation (If Any)","metadata":{}},{"cell_type":"markdown","source":"## 1. Importing Libraries","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sn\nimport glob","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T16:02:43.893757Z","iopub.execute_input":"2025-02-15T16:02:43.894126Z","iopub.status.idle":"2025-02-15T16:02:43.899028Z","shell.execute_reply.started":"2025-02-15T16:02:43.894084Z","shell.execute_reply":"2025-02-15T16:02:43.897684Z"}},"outputs":[],"execution_count":25},{"cell_type":"markdown","source":"## 2. Importing datasets","metadata":{}},{"cell_type":"markdown","source":"The dataset we are working on has separate files on uber rides data, with various dates. We shall target to use data from these files and use the sets which have complete information.","metadata":{}},{"cell_type":"markdown","source":"#### Dataset 1: Pickup date and base number","metadata":{}},{"cell_type":"code","source":"pickup_df = pd.read_csv(\"/kaggle/input/uber-trip-data-jan-june-2015/uber-raw-data-janjune-15.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T16:02:43.900738Z","iopub.execute_input":"2025-02-15T16:02:43.901274Z","iopub.status.idle":"2025-02-15T16:02:54.284694Z","shell.execute_reply.started":"2025-02-15T16:02:43.901222Z","shell.execute_reply":"2025-02-15T16:02:54.283583Z"}},"outputs":[],"execution_count":26},{"cell_type":"markdown","source":"#### Dataset 2: Number of Trip, Active vehicles and base ","metadata":{}},{"cell_type":"code","source":"trip_veh_df = pd.read_csv(\"/kaggle/input/uber-trip-data-jan-and-feb-2015/Uber-Jan-Feb-FOIL.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T16:02:54.286653Z","iopub.execute_input":"2025-02-15T16:02:54.287005Z","iopub.status.idle":"2025-02-15T16:02:54.295645Z","shell.execute_reply.started":"2025-02-15T16:02:54.286980Z","shell.execute_reply":"2025-02-15T16:02:54.294284Z"}},"outputs":[],"execution_count":27},{"cell_type":"markdown","source":"#### Dataset 3: ","metadata":{}},{"cell_type":"code","source":"csv_files = glob.glob(\"/kaggle/input/uber-raw-data-apr-2014-sep-2014/*.csv\")\ndfs = [pd.read_csv(file) for file in csv_files]\nlat_long_df = pd.concat(dfs, ignore_index=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T16:02:54.297174Z","iopub.execute_input":"2025-02-15T16:02:54.297496Z","iopub.status.idle":"2025-02-15T16:02:57.205014Z","shell.execute_reply.started":"2025-02-15T16:02:54.297472Z","shell.execute_reply":"2025-02-15T16:02:57.203943Z"}},"outputs":[],"execution_count":28},{"cell_type":"markdown","source":"## 3. Data Pre-processing","metadata":{}},{"cell_type":"code","source":"pickup_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T16:02:57.206091Z","iopub.execute_input":"2025-02-15T16:02:57.206519Z","iopub.status.idle":"2025-02-15T16:02:57.217423Z","shell.execute_reply.started":"2025-02-15T16:02:57.206480Z","shell.execute_reply":"2025-02-15T16:02:57.216242Z"}},"outputs":[{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"  Dispatching_base_num          Pickup_date Affiliated_base_num  locationID\n0               B02617  2015-05-17 09:47:00              B02617         141\n1               B02617  2015-05-17 09:47:00              B02617          65\n2               B02617  2015-05-17 09:47:00              B02617         100\n3               B02617  2015-05-17 09:47:00              B02774          80\n4               B02617  2015-05-17 09:47:00              B02617          90","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Dispatching_base_num</th>\n      <th>Pickup_date</th>\n      <th>Affiliated_base_num</th>\n      <th>locationID</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>B02617</td>\n      <td>2015-05-17 09:47:00</td>\n      <td>B02617</td>\n      <td>141</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>B02617</td>\n      <td>2015-05-17 09:47:00</td>\n      <td>B02617</td>\n      <td>65</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>B02617</td>\n      <td>2015-05-17 09:47:00</td>\n      <td>B02617</td>\n      <td>100</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>B02617</td>\n      <td>2015-05-17 09:47:00</td>\n      <td>B02774</td>\n      <td>80</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>B02617</td>\n      <td>2015-05-17 09:47:00</td>\n      <td>B02617</td>\n      <td>90</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":29},{"cell_type":"code","source":"trip_veh_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T16:02:57.218650Z","iopub.execute_input":"2025-02-15T16:02:57.219074Z","iopub.status.idle":"2025-02-15T16:02:57.241975Z","shell.execute_reply.started":"2025-02-15T16:02:57.219034Z","shell.execute_reply":"2025-02-15T16:02:57.240782Z"}},"outputs":[{"execution_count":30,"output_type":"execute_result","data":{"text/plain":"  dispatching_base_number      date  active_vehicles  trips\n0                  B02512  1/1/2015              190   1132\n1                  B02765  1/1/2015              225   1765\n2                  B02764  1/1/2015             3427  29421\n3                  B02682  1/1/2015              945   7679\n4                  B02617  1/1/2015             1228   9537","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>dispatching_base_number</th>\n      <th>date</th>\n      <th>active_vehicles</th>\n      <th>trips</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>B02512</td>\n      <td>1/1/2015</td>\n      <td>190</td>\n      <td>1132</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>B02765</td>\n      <td>1/1/2015</td>\n      <td>225</td>\n      <td>1765</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>B02764</td>\n      <td>1/1/2015</td>\n      <td>3427</td>\n      <td>29421</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>B02682</td>\n      <td>1/1/2015</td>\n      <td>945</td>\n      <td>7679</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>B02617</td>\n      <td>1/1/2015</td>\n      <td>1228</td>\n      <td>9537</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":30},{"cell_type":"code","source":"lat_long_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T16:02:57.245052Z","iopub.execute_input":"2025-02-15T16:02:57.245423Z","iopub.status.idle":"2025-02-15T16:02:57.269725Z","shell.execute_reply.started":"2025-02-15T16:02:57.245392Z","shell.execute_reply":"2025-02-15T16:02:57.268719Z"}},"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"          Date/Time      Lat      Lon    Base\n0  5/1/2014 0:02:00  40.7521 -73.9914  B02512\n1  5/1/2014 0:06:00  40.6965 -73.9715  B02512\n2  5/1/2014 0:15:00  40.7464 -73.9838  B02512\n3  5/1/2014 0:17:00  40.7463 -74.0011  B02512\n4  5/1/2014 0:17:00  40.7594 -73.9734  B02512","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date/Time</th>\n      <th>Lat</th>\n      <th>Lon</th>\n      <th>Base</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>5/1/2014 0:02:00</td>\n      <td>40.7521</td>\n      <td>-73.9914</td>\n      <td>B02512</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>5/1/2014 0:06:00</td>\n      <td>40.6965</td>\n      <td>-73.9715</td>\n      <td>B02512</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5/1/2014 0:15:00</td>\n      <td>40.7464</td>\n      <td>-73.9838</td>\n      <td>B02512</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>5/1/2014 0:17:00</td>\n      <td>40.7463</td>\n      <td>-74.0011</td>\n      <td>B02512</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5/1/2014 0:17:00</td>\n      <td>40.7594</td>\n      <td>-73.9734</td>\n      <td>B02512</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":31},{"cell_type":"markdown","source":"So, now we have three dataframes consisting of the data from different input files. We need to sensibly merge them before proceeding","metadata":{}},{"cell_type":"code","source":"pickup_df.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T16:02:57.271216Z","iopub.execute_input":"2025-02-15T16:02:57.271586Z","iopub.status.idle":"2025-02-15T16:02:57.291795Z","shell.execute_reply.started":"2025-02-15T16:02:57.271558Z","shell.execute_reply":"2025-02-15T16:02:57.290699Z"}},"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"(14270479, 4)"},"metadata":{}}],"execution_count":32},{"cell_type":"code","source":"trip_veh_df.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T16:02:57.292908Z","iopub.execute_input":"2025-02-15T16:02:57.293304Z","iopub.status.idle":"2025-02-15T16:02:57.313639Z","shell.execute_reply.started":"2025-02-15T16:02:57.293275Z","shell.execute_reply":"2025-02-15T16:02:57.312371Z"}},"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"(354, 4)"},"metadata":{}}],"execution_count":33},{"cell_type":"code","source":"lat_long_df.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T16:02:57.314823Z","iopub.execute_input":"2025-02-15T16:02:57.315246Z","iopub.status.idle":"2025-02-15T16:02:57.334643Z","shell.execute_reply.started":"2025-02-15T16:02:57.315208Z","shell.execute_reply":"2025-02-15T16:02:57.333467Z"}},"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"(4534327, 4)"},"metadata":{}}],"execution_count":34},{"cell_type":"markdown","source":"As can be seen from the dataframe shapes that the vehicle and trip data is pretty scarce. Let's explore the range of dates which is covered in these","metadata":{}},{"cell_type":"code","source":"pickup_df[\"DateTime\"] = pd.to_datetime(pickup_df[\"Pickup_date\"])\ntrip_veh_df[\"DateTime\"] = pd.to_datetime(trip_veh_df[\"date\"])\nlat_long_df[\"DateTime\"] = pd.to_datetime(lat_long_df[\"Date/Time\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T16:02:57.335686Z","iopub.execute_input":"2025-02-15T16:02:57.336073Z","iopub.status.idle":"2025-02-15T16:03:07.254397Z","shell.execute_reply.started":"2025-02-15T16:02:57.336043Z","shell.execute_reply":"2025-02-15T16:03:07.253239Z"}},"outputs":[],"execution_count":35},{"cell_type":"code","source":"pickup_df.dtypes","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T16:03:07.255324Z","iopub.execute_input":"2025-02-15T16:03:07.255607Z","iopub.status.idle":"2025-02-15T16:03:07.263389Z","shell.execute_reply.started":"2025-02-15T16:03:07.255584Z","shell.execute_reply":"2025-02-15T16:03:07.262186Z"}},"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"Dispatching_base_num            object\nPickup_date                     object\nAffiliated_base_num             object\nlocationID                       int64\nDateTime                datetime64[ns]\ndtype: object"},"metadata":{}}],"execution_count":36},{"cell_type":"code","source":"trip_veh_df.dtypes","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T16:03:07.264608Z","iopub.execute_input":"2025-02-15T16:03:07.265068Z","iopub.status.idle":"2025-02-15T16:03:07.284982Z","shell.execute_reply.started":"2025-02-15T16:03:07.265038Z","shell.execute_reply":"2025-02-15T16:03:07.283845Z"}},"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"dispatching_base_number            object\ndate                               object\nactive_vehicles                     int64\ntrips                               int64\nDateTime                   datetime64[ns]\ndtype: object"},"metadata":{}}],"execution_count":37},{"cell_type":"code","source":"lat_long_df.dtypes","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T16:03:07.285919Z","iopub.execute_input":"2025-02-15T16:03:07.286252Z","iopub.status.idle":"2025-02-15T16:03:07.310954Z","shell.execute_reply.started":"2025-02-15T16:03:07.286226Z","shell.execute_reply":"2025-02-15T16:03:07.309788Z"}},"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"Date/Time            object\nLat                 float64\nLon                 float64\nBase                 object\nDateTime     datetime64[ns]\ndtype: object"},"metadata":{}}],"execution_count":38},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"base_mapping = {\n    \"B02512\": \"Unter\",\n    \"B02598\": \"Hinter\",\n    \"B02617\": \"Weiter\",\n    \"B02682\": \"Schmecken\",\n    \"B02764\": \"Danach-NY\",\n    \"B02765\": \"Grun\",\n    \"B02835\": \"Dreist\",\n    \"B02836\": \"Drinnen\"\n}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T16:03:07.312090Z","iopub.execute_input":"2025-02-15T16:03:07.312435Z","iopub.status.idle":"2025-02-15T16:03:07.330301Z","shell.execute_reply.started":"2025-02-15T16:03:07.312410Z","shell.execute_reply":"2025-02-15T16:03:07.329195Z"}},"outputs":[],"execution_count":39},{"cell_type":"code","source":"pickup_df['Base Name'] = pickup_df['Dispatching_base_num'].map(base_mapping)\ntrip_veh_df['Base Name'] = trip_veh_df['dispatching_base_number'].map(base_mapping)\nlat_long_df['Base Name'] = lat_long_df['Base'].map(base_mapping)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T16:03:07.331530Z","iopub.execute_input":"2025-02-15T16:03:07.331958Z","iopub.status.idle":"2025-02-15T16:03:08.900832Z","shell.execute_reply.started":"2025-02-15T16:03:07.331922Z","shell.execute_reply":"2025-02-15T16:03:08.899626Z"}},"outputs":[],"execution_count":40},{"cell_type":"markdown","source":"## 4. Exploratory Data Analysis","metadata":{}},{"cell_type":"markdown","source":"### 4.1 Univariate Analysis","metadata":{}},{"cell_type":"code","source":"base_counts = df['Base Name'].value_counts()\n\nfig, ax = plt.subplots(figsize=(15,15))\n\nbase_counts.plot(kind='bar', color='skyblue', edgecolor='black')\n\nplt.xlabel(\"Base Company\")\nplt.ylabel(\"Number of Pickups\")\nplt.title(\"Uber Pickups\")\nplt.xticks(rotation=45)\nplt.grid(axis='y', linestyle='--', alpha=0.7)\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T16:03:08.902017Z","iopub.execute_input":"2025-02-15T16:03:08.902456Z","iopub.status.idle":"2025-02-15T16:03:08.919985Z","shell.execute_reply.started":"2025-02-15T16:03:08.902413Z","shell.execute_reply":"2025-02-15T16:03:08.918135Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-41-1a8746f2f1c1>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mbase_counts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Base Name'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue_counts\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubplots\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mbase_counts\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'bar'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'skyblue'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0medgecolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'black'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"],"ename":"NameError","evalue":"name 'df' is not defined","output_type":"error"}],"execution_count":41},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}